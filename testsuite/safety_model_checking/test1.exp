source lib/include.tcl

cd $subdir

set commands [dict create]


# TEST 13:

dict set commands test13_seq cmd "$binpaths(prom2lts-seq) $EXAMPLES_PATH/i4.spinja -d -n"
dict set commands test13_seq exp "Deadlocks: 501"

dict set commands test13_mc cmd "prom2lts-mc $EXAMPLES_PATH/i4.spinja -d -n"
dict set commands test13_mc exp "Deadlocks: 501"

dict set commands test13_dist cmd "prom2lts-dist $EXAMPLES_PATH/i4.spinja -d -n"
dict set commands test13_dist exp "Deadlocks: 501"

dict set commands test13_sym cmd "prom2lts-sym $EXAMPLES_PATH/i4.spinja -d -n"
# TODO: Unknown correct output due to an: ** error **: Error counting (--no-exit) is not implemented.
dict set commands test13_sym exp ""


# TEST 14:

dict set commands test14_seq cmd "prom2lts-seq $EXAMPLES_PATH/p312.pml.spinja --action=assert --trace=t14_seq.gcf"
# TODO: Unknown correct output due to a segmentation fault in the tool
dict set commands test14_seq exp ""

dict set commands test14_mc cmd "prom2lts-mc $EXAMPLES_PATH/p312.pml.spinja --action=assert --trace=t14_mc.gcf"
# TODO: Unknown correct output due to a segmentation fault in the tool
dict set commands test14_mc exp ""

dict set commands test14_dist cmd "prom2lts-dist $EXAMPLES_PATH/p312.pml.spinja --action=assert --trace=t14_dist.gcf"
# TODO: Unknown correct output due to a segmentation fault in the tool
dict set commands test14_dist exp ""

dict set commands test14_sym cmd "prom2lts-sym $EXAMPLES_PATH/p312.pml.spinja --action=assert --trace=t14_sym.gcf"
# TODO: Unknown correct output due to a segmentation fault in the tool
dict set commands test14_sym exp ""


# TEST 15:

set backends [find_alg_backends "{mc,seq,dist}"]
foreach be $backends {
    set lang [lindex [split [lindex [split $be "/"] end] "2"] 0]
    dict set commands test15_$lang cmd "$be $EXAMPLES_PATH/p312.pml.spinja --invariant=\"N/2 == 1\" -n"
    dict set commands test15_$lang exp ""
}


foreach testcase [dict keys $commands] {
    set command [dict get $commands $testcase cmd]
    set exp [dict get $commands $testcase exp]
    runmytest $testcase $command $exp
}

