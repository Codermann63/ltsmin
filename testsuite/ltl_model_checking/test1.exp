source lib/include.tcl

cd $subdir

set commands [dict create]

puts "\n----------------------------------------------"
puts   "TESTING: LTL Algorithms"
puts   "----------------------------------------------\n"

set spins 1
if { [ compile_promela {"peterson3.pml" "zune.pml"} ] == 0 } {
    puts "No SpinS compiler found!, Skipping Promela examples"
    set spins 0
}

set commands [dict create]

# TEST 16:

set strategies {"cndfs" "lndfs" "endfs" "endfs,lndfs" "endfs,endfs,ndfs" "ndfs" "ndfs"}

# anderson:
foreach s $strategies {
    dict set commands test16_dve_mc_$s cmd "$binpaths(dve2lts-mc) --threads=4 \
    	--strategy=$s -s22 $EXAMPLES_PATH/anderson.1.prop4.dve"
    dict set commands test16_dve_mc_$s exp "633945 states"
}
dict set commands test_16_dve_seq cmd "$binpaths(dve2lts-seq) --strategy=scc \
	$EXAMPLES_PATH/anderson.1.prop4.dve"
# This expected value is assumed to be the same as previous multicore results. This is untested!
dict set commands test_16_dve_seq exp "633945 states"

# peterson
if {$spins == 1} {
    foreach s $strategies {
        dict set commands test16_seq_$s cmd "$binpaths(prom2lts-mc) --threads=4 \
    	--strategy=$s -s20 $EXAMPLES_PATH/peterson3.pml.spins"
        dict set commands test16_seq_$s exp "167277 states"
    }
    dict set commands test16_prom_seq cmd "$binpaths(prom2lts-seq) --strategy=scc \
    	$EXAMPLES_PATH/peterson3.pml.spins"
    dict set commands test16_prom_seq exp "167277 states"
}

# TEST 17:

# iprotocol
foreach s $strategies {
    dict set commands test17_dve_mc_$s cmd "$binpaths(dve2lts-mc) --threads=4 \
	-s22 --strategy=$s $EXAMPLES_PATH/iprotocol.2.prop4.dve"
    dict set commands test17_dve_mc_$s exp "Accepting cycle FOUND"
}
dict set commands test_17_dve_seq cmd "$binpaths(dve2lts-seq) --strategy=scc \
	$EXAMPLES_PATH/iprotocol.2.prop4.dve"
dict set commands test_17_dve_seq exp "accepting cycle found"

# zune:
if {$spins == 1} {
    foreach s $strategies {
        dict set commands test17_prom_mc_$s cmd "$binpaths(prom2lts-mc) --threads=4 \
    	-s22 --strategy=$s $EXAMPLES_PATH/zune.pml.spins"
        dict set commands test17_prom_mc_$s exp "Accepting cycle FOUND"
    }
    dict set commands test17_prom_seq cmd "$binpaths(prom2lts-seq) --strategy=scc \
    	$EXAMPLES_PATH/zune.pml.spins"
    dict set commands test17_prom_seq exp "accepting cycle found"
}


# TEST 18:
dict set commands test18_mc cmd "$binpaths(dve2lts-mc) --strategy=ndfs \
	-s22 $EXAMPLES_PATH/iprotocol.2.dve \
	--ltl=\"((\[\] <> Medium==dataOk) && (\[\]<>Medium==nakOk)) -> (\[\]<>Consumer==consume)\""
dict set commands test18_mc exp "Accepting cycle FOUND"

# NOTE: the difference in the use of captitals in the expected output between this and previous test
dict set commands test18_seq cmd "$binpaths(dve2lts-seq) --strategy=scc \
	$EXAMPLES_PATH/iprotocol.2.dve \
	--ltl=\"((\[\] <> Medium==dataOk) && (\[\]<>Medium==nakOk)) -> (\[\]<>Consumer==consume)\""
dict set commands test18_seq exp "accepting cycle found"


# TEST 19:

dict set commands test19_mc cmd [subst "$binpaths(dve2lts-mc) --strategy=ndfs \
	-s22 $EXAMPLES_PATH/elevator.3.dve \
	--ltl=\"(\[\] (Person_0==in_elevator -> (<> Person_0==out)))\""]
dict set commands test19_mc exp "495463 states"

dict set commands test19_seq cmd "$binpaths(dve2lts-seq) --strategy=scc \
	$EXAMPLES_PATH/elevator.3.dve \
	--ltl=\"(\[\] (Person_0==in_elevator->(<>Person_0==out)))\""
dict set commands test19_seq exp "495463 states"


foreach testcase [dict keys $commands] {
    set command [dict get $commands $testcase cmd]
    set exp [dict get $commands $testcase exp]

#    puts "$command"

    runmytest $testcase $command $exp
}


cd ".."
