March 4, 2012 - Release 2.0 of the LTSmin toolset

 * Refactored runtime and IO libraries, organized source code and renamed tools:
    o *-reach       -> *2lts-sym  (Symbolic CTL/mu model checking, ETF output)
    o *2lts-mc      -- *2lts-mc   (Multi-core LTL model checking, compression)
    o *2lts-mpi     -> *2lts-dist (Distributed LTS generation, LTS output)
    o *2lts-gsea    -> *2lts-seq  (Sequential POR, LTL, LTS output, BDD storage)
    o *2lts-grey    -- REMOVED    (Old sequential tool)
    o lts-compare   -- NEW        (Branching/String bisim. equivalence check)
    o ltsmin-tracepp-> ltsmin-printtrace    (Trace pretty printing)
    o ltsmin(-mpi)  -> ltsmin-reduce(-dist) (LTS minimization: LTSmin's origin)
    o ltstrans      -> lts-convert          (LTS file format conversion)
 * New parallel BBD package: Sylvan [1,2]
    o BDD operations are parallelized using the Wool framework (included)
    o Use: *2lts-sym --vset=sylvan
           *2lts-seq --state=vset --vset=sylvan
 * New frontend for UPPAAL xml timed automata via opaal [A] (only opaal2lts-mc).
   This adds semi-symbolic states and inclusion checks to PINS [3]:
    o Multi-core reachability on timed automata using inclusion abstraction
    o Supports all multi-core features, including NDFS with abstraction [4]
    o Added a strict BFS algorithm [3] to reduce abstracted state counts
      (--strategy=sbfs, default for opaal)
 * New frontend for PBESs generating parity games for the symbolic solver [5]:
    o All backends: pbes2lts-sym, pbes2lts-mc, pbes2lts-dist, and pbes2lts-seq 
    o Added a symbolic parity game solver: spgsolver
    o PGSolver file output format ('{ast}.pg')
 * Extensions to the multi-core backend (*2lts-mc):
    o Support for muCRL/mCRL2/PBES using processes ({lpo,lps,pbes}2lts-mc)
    o Added CNDFS algorithm [6]
    o Added OWCTY algorithm [B] in the multi-core backends
    o Added DFS_FIFO algorithm for parallel livelock detection using POR [7]
    o Added strict BFS algorithms (--strategy=sbfs,pbfs, see [3,C])
    o Elementary support for writing LTSs (using pbfs) and POR (single threaded)
 * Renamed SpinJa to SpinS [8], and added:
    o Valid end-state filter, assertions (--action=assert) and never claims
    o Guards and dependencies for POR
    o Support for Java 1.5 and VMs from different vendors (previously JDK 1.7)
 * Optimized multi-core data structures (mc-lib):
    o Reduced initialization times by using calloc instead of malloc+memset
    o Reduced tree memory usage by 50% by splitting table for roots and leafs.
      Set the relative ratio using: --ratio=n (n=2 by default)
    o Parallel Cleary tree (--state=cleary-tree) halving memory usage [9,8]
    o Reduced memoized hash sizes to 16 bit
    o Introduced a non-indexing tree that skips the root node for lookups
    o Thread-local initialization and allocation for better NUMA performance
    o New load balancer with simplified interface
 * Added test suite, called via 'make check' (requires DejaGNU)

[1] Multi-Core BDD Operations for Symbolic Reachability - http://essay.utwente.nl/61650/
[2] Multi-core and/or Symbolic Model Checking - http://eprints.eemcs.utwente.nl/22550/
[3] Multi-Core Reachability for Timed Automata - http://eprints.eemcs.utwente.nl/21972/
[4] Multi-Core Emptiness Checking of Timed Buchi Automata using Inclusion Abstraction -
    http://eprints.eemcs.utwente.nl/23158
[5] Efficient Instantiation of Parameterised Boolean Equations Systems to Parity Games -
    http://eprints.eemcs.utwente.nl/22278/
[6] Improved Multi-Core NDFS - http://eprints.eemcs.utwente.nl/21967/
[7] Improved On-The-Fly Livelock Detection - http://eprints.eemcs.utwente.nl/23159
[8] SpinS: Extending LTSmin with Promela via SpinJa - http://eprints.eemcs.utwente.nl/22042/
[9] A Parallel Compact Hash Table - http://eprints.eemcs.utwente.nl/20648/
[A] opaal: https://code.launchpad.net/~opaal-developers/opaal/opaal-ltsmin-succgen
[B] Barnat et al. - A Time-Optimal On-the-Fly parallel algorithm for model checking of weak LTL properties
[C] G. Holzmann - Parallelizing the Spin Model Checker

February 22, 2012 - Release 1.8 of the LTSmin toolset

 * Implementation of Evangelista et al.'s parallel NDFS and variations, see:
   http://eprints.eemcs.utwente.nl/20618/ (Variations on Multi-Core NDFS)
 * Native implementations of Ciardo et al.'s saturation algorithms for
   AtermDD and ListDD (<spec>-reach --saturation=sat) (Tien-Loong Siaw)
 * Dependency matrix regrouping using simulated annealing (-rgsa, -rcsa)
 * SpinJa support for channel operations, run expressions with arguments,
   and preprocessor defines
 * New experimental I/O library and run-time environment
 * New tools employing the new I/O library and run-time environment:
   o lts-tracepp for pretty printing traces
   o sigmin-mpi for distributed reduction of labeled transition systems
   o sigmin-one for sequential reduction of labeled transition systems
   o ltstrans for conversion of labeled transition systems
   o ltscmp-one for sequential comparison of labeled transition systems
   o <spec>2lts-hre for distributed state space generation

July 24, 2011 - Release 1.7.1 of the LTSmin toolset

 * Fix for Multi-Core NDFS algorithm: introduced wait counter
   (<spec>2lts-mc)
 * Introduced/improved color counters and option no-all-red
   (<spec>2lts-mc)

June, 24, 2011 - Release 1.7 of the LTSmin toolset

 * New tools <spec>2lts-gsea
   (General State Exploring Algorithms)
 * PINS LTL layer
 * Several multi-core LTL search algorithms
   (<spec>2lts-mc)
 * Several sequential LTL search algorithms
   (<spec>2lts-grey, <spec>2lts-gsea)
 * PINS Partial-Order Reduction Layer
   (<spec>2lts-gsea)
 * Bare-bones symbolic model checker for state-based mu-calculus
 * New SpinJa frontend
 * Patched DiVinE 2.4 frontend required
 * Reimplementation of mcrl2 PINS frontend
 * Read/Write dependency matrices and combined printing
 * Vector set improvements and clean-up
 * Connection to the libDDD decision diagram package
 * Conversion from ETF to DVE (etf-convert)

November 1, 2010 - Release 1.6 of the LTSmin toolset.

 * New frontend DVE2 (requires DiVinE 2.2)
 * Enumerative Multi-Core backend
   (<spec>2lts-mc)
 * Multi-Core TreeDBS compression for state vectors
   (<spec>2lts-mc)
 * Finding error actions symbolically (<spec>-reach --action)
 * Symbolic saturation-like strategies
 * Faster trace generation for <spec>-reach
 * BDD reordering for BuDDy vset

December 1, 2009 - Release 1.5 of the LTSmin toolset.

 * New frontend DVE (requires DiVinE-cluster)
 * Bignum support for state counts in spec-reach tools
   (Jeroen Ketema)
 * spec-reach clean-up
 * 'tree' vector set implementation based on AtermDD

September 17, 2009 - Release 1.4 of the LTSmin toolset.

 * New tool ce-mpi for distributed cycle elimination
   (Simona Orzan)
 * New tool ltsmin-tracepp for pretty-printing traces to
   deadlock states
 * TorX support factored out into separate tools
   {lpo,lps,nips}2torx
 * Enumerative DFS support
 * Enumerative deadlock detection and trace output
 * Reworked ETF support (non-backwards compatible)
 * bash completion for LTSmin tools (see contrib/)

July 10, 2009 - Release 1.3 of the LTSmin toolset.

 * Regrouping optimizations of the PINS matrix
 * Connection to the CADP toolkit via pins_open
 * Tuning of the BDD usage
 * Significant performance improvements
 * Symbolic deadlock detection and trace output

March 31, 2009 - Release 1.2 of the LTSmin toolset.

The main improvements in this release are:
 * Option parsing is now performed using the popt library. Thus, all
   long options now start with a double minus.
 * The user can choose between BuDDy and ATermDD as the decision diagram
   library used in the symbolic tools.
 * A new compressed file format for labeled transition systems with
   arbitrary numbers of state and edge labels has been implemented.
 * The symbolic tools can write the results of the reachability analysis
   in the form of an ETF (Enumerated Table Format) file. This ETF file
   can be used as input for the reachabilty tools and can be directly
   translated to DVE.


