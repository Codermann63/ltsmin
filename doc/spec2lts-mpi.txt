== NAME
lpo2lts-mpi, lps2lts-mpi, nips2lts-mpi - Distributed state space generator.

== SYNOPSIS

mpirun _<nodespec>_ lpo2lts-mpi [OPTION]... 'file.tbf'

mpirun _<nodespec>_ lps2lts-mpi [OPTION]... 'file.lps'

mpirun _<nodespec>_ nips2lts-mpi [OPTION]... 'file.b'

== DESCRIPTION
lpo2lts-mpi generates a labelled transition system from a specification
provided in 'file.tbf'.  Specifications are in _tbf_ format and are
commonly generated by linkman:mcrl[1] or linkman:mcrl22mcrl[1]. 


lps2lts-mpi generates a labelled transition system from a specification
provided in 'file.lps'.  Specifications are in _lps_ format and are
commonly generated by linkman:mcrl22lps[1]. 

nips2lts-mpi generates a labelled transition system from a specification
provided in 'file.b'.

The tool uses http://www.mpi-forum.org/[MPI] for distributed
computation, thus it has to be started via `mpirun`.  _nodespec_
determines which processors the tool is run on.

The tool uses MPI-IO, the I/O chapter in MPI-2, so if your MPI implementation
has special extensions in MPI-IO, such as http://www.pvfs.org/[PVFS2], then
those extensions are supported.

== OPTIONS       
*-v*::
        Increase the level of verbosity

*-q*::
        Be quiet; do not print anything to the terminal.

*-out* 'archive'::
	Specifiy the name of the output archive.
        This will be a pattern archive if 'archive' contains ++%s++
        and a GCF archive otherwise.

*-nice* value::
        Set linkman:nice[1] value to _value_.

*-plain*::
        Disable output compression.

*-help*::
        Print help message.

*-mpi-io*::
	use MPI-IO (default)

*-unix-io*::
	use UNIX IO (e.g. if your NFS locking is broken)

*-cache*::
	Add the caching wrapper around the model.

*-nolts*::
	Disable writing of the LTS.

== mCRL OPTIONS

The command line is passed to the mCRL library, so all of the usual stepper options are interpreted.
Please note that some combinations can lead to incorrect results. One of the safe options is:

*-alt* rewriter::
       Use _rewriter_.  Allowed values depend on the linkman:mcrl[1]
       library.  Commonly, the following are provided: +rw+, +rww+,
       +jitty+.

== ATerm OPTIONS

The command line is passed to ATinit, so the standard ATerm library options are available for mCRL and mCRL2.
To find out which ones use the option below.

*-at-help*::
	Get a list of ATerm library options.

== EXIT STATUS
0::
        Successful termination.
>0::
        Some error occurred.

== EXAMPLES
As running example, we use a model of the bounded retransmission protocol
from the mCRL examples. Assuming we have copied the file 'brp.mcrl'
to our working directory, we can linearize the model with the following command:

----
mcrl -regular -nocluster brp.mcrl
----

This produces a file named 'brp.tbf'. This is the input for the state
space generator. If you want to produce a _DIR_ format output, which
is compatible with the mCRL tools, you need to type

----
mkdir brp.dir
mpirun -np 2 instantiator-mpi -alt rww -plain -out brp.dir/%s brp.tbf
----

Please note that you must create the directory yourself. We would have liked
to put this in the tool, but MPI-IO does not have a function call
for creating directories.

If you want to create a compressed GCF file then all you need to type is

----
mpirun -np 2 instantiator-mpi -alt rww -out brp.gcf brp.tbf
----

This GCF file can be read by both linkman:ltsmin-mpi[1] and linkman:ltsmin-convert[1].

== SEE ALSO
linkman:ltsmin[5], 
linkman:ltsmin-mpi[1], 
linkman:ltsmin-convert[1], 
http://www.cwi.nl/~mcrl/[mcrl],
http://www.mcrl2.org/[mcrl2],
http://www.cs.utwente.nl/~michaelw/nips/[nips],
http://www.mpi-forum.org/[MPI Forum]


