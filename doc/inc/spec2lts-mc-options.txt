*--threads*='NUMBER'::
        Number of threads to use for state space exploration
        (default: NUMBER=NUM_CORES). Maximum is 64.


*--strategy*='TYPE'::
        Select an exploration strategy. Two kinds of algorithms
        are avaliable: LTL model checking and reachability.
        The multi-core LTL algorithms (Nested DFS) are implemented
        in a swarmed fashion, however with a shared state storage.
        On top of that, MCNDFS offers work sharing between threads
        and can deliver linear speedups for some models.
        Note that the LTL algorithms require buchi automata as input.
        Such a model can be provided directly by the language frontend,
        i.e., DiVinE property models are supported, or by the LTL
        layer (see --ltl).
        Note finally that strict reachability exploration orders
        are not guaranteed by the multicore version.
        'TYPE' can be one of the following options:

bfs;;
  explore state space in breadth-first order (default).

dfs;;
  explore state space in relaxed depth-first order. Relaxed meaning that
  the inclusion check on the set of visited states is executed immediately
  after generating a state. This saves stack space and improves performance
  of the parallel reachability analysis.

ndfs;;
  multi-core swarmed Nested Depth-First Search (Courcoubetis et al.).

nndfs;;
  multi-core swarmed New Nested Depth-First Search (Schwoon, Esparza).

mcnndfs;;
  Multi-Core Nested Depth-First Search (Laarman, Langerak, van de Pol, Weber, Wijs).

mcndfs;;
  Idem. No difference with MCNNDFS.
  Multi-Core Nested Depth-First Search (Laarman, Langerak, van de Pol, Weber, Wijs).


*--nar*::
        No All Red. Turn off all-red optimization in NNDFS/MCNDFS.

*--perm*='TYPE'::
        Select the transition permutation, which is used to guide
        different threads to different parts of the state space.
        A good permutation can significantly speed up bug hunting.
        'TYPE' can be one of the following options, each has
        different properties in terms of performance and effectiveness
        summarized as (perf./eff.) :

dynamic;;
    use heuristics from state colorings (decent/potentially very good).
    We have indications that the heuristics can be improved further.

sort;;
    sort on the unique id of the successor state (decent/good)

random;;
    use multiple fixed random permutation schemes per worker (decent/good).

sr;;
    sort according to one fixed random permutation scheme per worker (decent/decent).

shift;;
   shift the order of transitions by a fixed value per worker (fast/decent).

shiftall;;
   as shift, but with a equal load for all workers (a bit slower/decent).

otf;;
    sort according to a dynamic permutation scheme (slow/perfect).

none;;
    use the same exploration order for all workers (default for reachability).


*--no-red-perm*::
    Turns the permutation layer of for the nested DFSs of the swarmed algorithms.


*--state*='TYPE'::
        Select type of data structure for storing visited states.
        'TYPE' can be one of the following options:

table;;
  use a lockless hash table.

tree;;
  use a lockless tree-compressed hash table (default).


*--size*='NUMBER'::
        Log_2 hash table size in elements (default: NUMBER=24).
        This is also used for the internal node table of the tree.


*--lb*='TYPE'::
        Select load-balancing strategy.  'TYPE' can be one of the
        following options:

srp;;
  synchronous random polling.

static;;
  initial BFS run, with static hand-off to all threads.

combined;;
  Starts with static balancing and moves to SRP when needed (default).

none;;
  turn load balancer off. Default for swarmed algorithms, for which threads 
  in principle explore the state space independently (see --strategy).


*--handoff*='NUMBER'::
        Maximum number of states to hand off to a thread requesting load
        (default: NUMBER=100). The operation may be expensive, depending
        on the size of the states.


*--gran*='NUMBER'::
        Granularity at which control is handed back to the load balancer
        (default: NUMBER=100). Higher values may reduce runtime
        overhead, but decrease the performance of the load balancer.
        The state space explorer uses the number of transitions as work
        counter.


*--ref*::
        Save space by storing references to table/tree on the stack/queue.
        Normally full states are stored. The swarmed algorithms always use
        references.


*--zobrist*='NUMBER'::
        Save time by using zobrist incremental state hashing.
        NUMBER defines the (log_2) size of the random number table
        (default: 0=OFF). Large tables mean better hash distributions,
        but more cache misses due to memory size.
        Experiments have shown that small tables (2^6) suffice for
        good distributions (equal or better than Jenkin's hash).
        Improvements are only noticable for fast state generators, like
        DiVinE 2.2 (manpage:dve22lts-mc[1]).


*--max*='NUMBER'::
        Maximum search depth.


include::reachability-options.txt[]
