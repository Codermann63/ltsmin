//                           -*- mode: doc; outline-regexp: "==\(=*\) ." -*-
ltsmin-mpi(1)
=============
:Author:  Michael Weber
:Email:   <michaelw@foldr.org>
:Date:    2008-10-20

== NAME
ltsmin-mpi - distributed minimization of labelled transition systems

== SYNOPSIS
mpirun _<nodespec>_ {manname} [OPTION] '<input>' '<output>'

== DESCRIPTION
This tool reduces a labeled transition system modulo bisimulation.
The default bisimulation is strong bisimulation.
Both input and output can be a GCF archive or a set of files.
To use a set of files the argument needs and occurrence of ++%s++.
If no ++%s++ is present then a GCF archive is assumed.

include::inc/mpi-blurb.txt[]

== OPTIONS

=== Reductions

*-s*, $--strong*::
Apply strong bisimulation reduction. This is the default.

*-b*, *--branching*::
Apply branching bisimulation reduction.

include::inc/general-options.txt[]


== EXAMPLES
In this example, we assume Open MPI with a TCP interconnect.

Working with the LTS, we generated in the example for linkman:lpo2lts-mpi[1], we
can now apply strong bisimulation reduction.

----
mpirun -np 2 -mca btl tcp,self ltsmin-mpi -s brp.gcf brp-s.gcf
----

Subsequently, we can reduce the result modulo branching bisimulation and write
it in the uncompressed format that is compatible with the mCRL tools:

----
mpirun -np 2 -mca btl tcp,self ltsmin-mpi -b brp-s.gcf brp-b.dir
----


== EXIT STATUS
0::
        Successful termination.
1::
        Some error occurred.

== SEE ALSO
linkman:ltsmin[5], 
linkman:lpo2lts-mpi[1], 
linkman:lps2lts-mpi[1], 
linkman:nips2lts-mpi[1], 
linkman:ltsmin-convert[1]
