//                           -*- mode: doc; outline-regexp: "==\\(=*\\) ." -*-
instantiator-mpi(1)
=================
:Author:  Michael Weber
:Email:   <michaelw@foldr.org>
:Date:    2008-10-20

== NAME
instantiator-mpi - distributed generation of labelled transition systems

== SYNOPSIS
mpirun _<nodespec>_ {manname} [OPTION]... 'file.tbf'

== DESCRIPTION
{manname} generates a labelled transition system from a specification
provided in 'file.tbf'.  Specifications are in _tbf_ format and are
commonly generated by linkman:mcrl[1] or linkman:mcrl22mcrl[1]. 

The tool uses http://www.mpi-forum.org/[MPI] for distributed
computation, thus it has to be started via `mpirun`.  _nodespec_
determines which processors the tool is run on.

The tool uses MPI-IO, the I/O chapter in MPI-2, so if your MPI implementation
has special extensions in MPI-IO, such as http://www.pvfs.org/[PVFS2], then
those extensions are supported.

== OPTIONS
*-alt* rewriter::
       Use _rewriter_.  Allowed values depend on the linkman:mcrl[1]
       library.  Commonly, the following are provided: +rw+, +rww+,
       +jitty+.
        
*-v*::
        Increase the level of verbosity

*-q*::
        Be quiet; do not print anything to the terminal.

*-out* 'archive'::
	Specifiy the name of the output archive.
        This will be a pattern archive if 'archive' contains ++%s++
        and a GCF archive otherwise.

*-nolb*::
        Disable load balancing.

*-nice* value::
        Set linkman:nice[1] value to _value_.

*-plain*::
        Disable output compression.

*-cmp*::
        Compare terms in term vector; this is useful if the
        representation of data is not unique, e.g., when a set is
        represented by an unsorted list.

*-seq-rw*::
        Perform initialisation of rewriters sequentially rather than
        in parallel. (Needed for the +rw+ rewriter.)

*-master-no-step*::
        Instruct master to act as database only; this improves latency
        of database lookups.

*-help*::
        Print help message.

*-st-help*::
        Print help for the mCRL stepper.

== EXIT STATUS
0::
        Successful termination.
1::
        Some error occurred.

== EXAMPLES
As running example, we use a model of the bounded retransmission protocol
from the mCRL examples. Assuming we have copied the file 'brp.mcrl'
to our working directory, we can linearize the model with the following command:

----
mcrl -regular -nocluster brp.mcrl
----

This produces a file named 'brp.tbf'. This is the input for the state
space generator. If you want to produce a _DIR_ format output, which
is compatible with the mCRL tools, you need to type

----
mkdir brp.dir
mpirun -np 2 instantiator-mpi -alt rww -plain -out brp.dir/%s brp.tbf
----

Please note that you must create the directory yourself. We would have liked
to put this in the tool, but MPI-IO does not have a function call
for creating directories.

If you want to create a compressed GCF file then all you need to type is

----
mpirun -np 2 instantiator-mpi -alt rww -out brp.gcf brp.tbf
----

This GCF file can be read by both linkman:ltsmin-mpi[1] and linkman:ltsmin-convert[1].

== SEE ALSO
linkman:ltsmin[5], 
linkman:ltsmin-mpi[1], 
linkman:ltsmin-convert[1], 
linkman:mcrl[1],
http://www.mcrl2.org/[mcrl2],
http://www.mpi-forum.org/[MPI Forum]
