ltsmin - minimization and instantiation of labelled transition systems 

* Introduction
LTSmin is a toolset for manipulating labelled transition
systems. LTSmin already connects a sizeable number of existing
(verification) tools: muCRL, mcrl2, DiVinE, SPIN, NIPS,
CADP. Moreover, it allows to reuse existing tools with new state space
generation techniques.

Implementing support for a new language module is in the
order of 200--600 lines of C "glue" code, and automatically yields
tools for standard reachability checking (e.g., for state space
generation and verification of safety properties), reachability with
symbolic state storage (vector set), fully symbolic (BDD-based)
reachability, distributed reachability (MPI-based), and multi-core
reachability (including multi-core compression and incremental
hashing).

The synergy effects in the LTSmin implementation are enabled by a
clean interface: all LTSmin modules work with a unifying state
representation of integer vectors of fixed size, and the PINS
dependency matrix which exploits the combinatorial nature of model
checking problems. This splits model checking tools into three mostly
independent parts: language modules, PINS optimizations, and model
checking algorithms.

On the other hand, the implementation of a verification algorithm
based on the PINS matrix automatically has access to muCRL, mcrl2,
DVE, PROMELA and ETF language modules.

Finally, all tools benefit from PINS2PINS optimizations, like local
transition caching (which speeds up slow state space generators),
matrix regrouping (which can drastically reduce run-time and memory
consumption of symbolic algorithms).

* Supported Systems
 - GNU/Linux (tested on Debian, OpenSuSE 11.2)
 - MacOS X, version 10.6 "Snow Leopard"
 - MacOS X, version 10.5 "Leopard"

* Installation Instructions
If you are building the software from a Git repository rather than a
release tarball, refer to Section "Building from a Git Repository" for
additional set-up instructions.  Then install the dependencies listed
in Section "Build Dependencies" below.

    # Unpack the tarball
    $ tar xvzf ltsmin-<version>.tar.gz
    $ cd ltsmin-<version>

    # Configure
    $ ./configure --disable-dependency-tracking --prefix /path/

It is a good idea to check the output of ./configure, to see whether
all dependencies were found.

    # Build
    $ make

    # Install
    $ make install

** Additional Build Options
*** configure options
For one-shot builds, the following option speeds up the build process
by not recording dependencies:

    ./configure --disable-dependency-tracking ...

Non-standard compilers, etc., can be configured by using variables:

    ./configure CFLAGS='-O3 -m64' MPICC=/sw/openmpi/1.2.8/bin/mpicc ...

This would add some options to the standard CFLAGS settings used for
building, to enable more optimizations and force a 64-bit build (for
the GCC C compiler).  Furthermore, the MPI compiler wrapper is set
explicitly instead of searching it in the current shell PATH.

Note that for libraries installed in non-standard places need special
attention: to be picked up by the configure script, library and header
search paths must be added, e.g.:

    ./configure LDFLAGS=-L/opt/local/lib CPPFLAGS=-I/opt/local/include

Additional setting of (DY)LD_LIBRARY_PATH might be needed for the
dynamic linker/loader (see, e.g., "man ld.so" or "man dyld").

See `./configure --help' for the list of available variables,
and file INSTALL for further details.

*** make targets
The following additional make targets are supported:

    mostlyclean::
    clean::
        Clean the source tree.

    doxygen-doc::
        Builds Doxygen documentation for the source code.


* Build Dependencies
We list the external libraries and tools which are required to build
this software.

*** popt
Download popt (>= 1.7) from <http://rpm5.org/files/popt/>.  We tested
with popt 1.14.

*** zlib
Download zlib from <http://www.zlib.net/>.

*** GNU make
Download GNU make from <http://www.gnu.org/software/make/>.

*** Flex
Download Flex (>= 2.5.35) from <http://flex.sourceforge.net/>.  We
tested with flex 2.5.35.

*** Apache Ant
Download Apache Ant from <http://ant.apache.org/>.  We tested with ant
1.7.1.  Note that ant is not required for building from a distribution
tarball (unless Java files were modified).  Note that we require
JavaCC task support for Ant.

** Optional Dependencies
*** muCRL
Download muCRL (>= 2.18.5) from <http://www.cwi.nl/~mcrl/mutool.html>.
We tested with muCRL-2.18.5.  Without muCRL, several tools will not be
built.  Also, the symbolic tools (<spec>-reach) might have degraded
performance due to the absense of the AtermDD decision diagram package.

*** mCRL2
Download the latest development version of mCRL2 from
<http://www.mcrl2.org/>.  We tested with mcrl2 SVN rev.8002.  Note
that all versions before SVN rev.7354 are insufficient (in particular,
all versions of mcrl2 released before September 2010).

Build and install mCRL2.  If the internal boost libraries are used
(which is the default) then the boost headers must be installed:

  cmake -DMCRL2_INSTALL_BOOST_HEADERS=ON
  make
  make install

Ensure that these headers are actually used to compile the PINS
support for mcrl2 (instead of, e.g., system-provided Boost headers).

*** CADP
See the CADP website <http://www.inrialpes.fr/vasy/cadp/> on how to
obtain a licence and download the CADP toolkit.

*** DiVinE 2
Download the latest released version of DiVinE from
<http://divine.fi.muni.cz/>.  We tested with the version 2.4.  Apply
the patch from <contrib/divine-2.4.patch> to the DiVinE source tree:

  cd divine-2.4
  patch -p1 < /path/to/ltsmin/contrib/divine-2.4.patch

Alternatively, download a LTSmin-enabled version of DiVinE via git:

    git clone http://fmt.cs.utwente.nl/tools/scm/divine2.git

Build with:

    cd divine2
    mkdir _build && cd _build
    cmake .. -DGUI=OFF -DRX_PATH= -DCMAKE_INSTALL_PREFIX=...
    make
    make install

(On MacOS X, option ``-DHOARD=OFF'' might have to be added to the
cmake command line to make it compile without errors.)

The LTSmin configure script will find the DiVinE installation
automatically, if the ``divine'' binary is in the search path.

With suitable options, the ``divine compile'' DVE compiler produces
LTSmin compatible libraries:

    divine compile -l model.dve

This produces a file ``model.dve2C'', which can also be passed to
LTSmin tools.  (This is done automatically by the LTSmin tools when
passing a ``.dve'' model, doing it manually is rarely needed.)

*** DiVinE(-cluster)
Download the latest CVS version of DiVinE-cluster; instructions can be
found at <http://divine.fi.muni.cz/trac/wiki/DevelopmentIntroduction>.
We tested with the version from 2009-12-01.

Alternatively, download divine-cluster 0.8.3 from
<http://divine.fi.muni.cz/page.php?page=download> and apply the patch
from <contrib/divine-cluster-0.8.3-ltsmin.patch> to the divine-cluster
source tree:

  cd divine-0.8.3
  patch -p1 < /path/to/ltsmin/contrib/divine-cluster-0.8.3-ltsmin.patch

Then, build and install divine-cluster according to their documentation.

*** MPI
In principle, any MPI library which supports MPI-IO should work.
However, we tested only with Open MPI <http://www.open-mpi.org/>.
Without MPI, the distributed tools (xxx2lts-mpi, ltsmin-mpi) will
not be built.

*** AsciiDoc
Download AsciiDoc (>= 8.4.4) from <http://www.methods.co.nz/asciidoc/>.
We tested with asciidoc-8.4.4.  Without asciidoc, documentation cannot
be rebuilt.  For convenience, release tarballs are shipping with
pre-built man pages and HTML documentation.

*** xmlto
Download xmlto from <http://cyberelk.net/tim/software/xmlto/>.  We
tested with xmlto-0.0.18.  Without xmlto, man pages cannot be rebuilt.

*** Doxygen
Download Doxygen from <http://www.doxygen.org/>.  We tested with
doxygen-1.5.5.  Without doxygen, internal source code documentation
cannot be generated.

*** MacOS X
For cross-compilation builds on MacOS X, the Apple Developer SDKs must
be installed.  They are available from Apple
<http://developer.apple.com/tools/download/>, or from the MacOS X
installation CDs.

* Building from a Git Repository
Before building the software as described above, the following commands
have to be executed in the top-level source directory:

    $ git submodule update --init
    $ ./ltsminreconf

** Dependencies
Building from another source than the release tarball requires some
extra tools to be installed:

*** GNU automake
Download automake (>= 1.10) from
<http://www.gnu.org/software/automake/>.  We tested with
automake-1.10.

*** GNU autoconf
Download autoconf (>= 2.60) from
<http://www.gnu.org/software/autoconf/>.  We tested with
autoconf-2.61.

*** GNU libtool
Download libtool (>= 1.5.26) from
<http://www.gnu.org/software/libtool/>.  We tested with
libtool-1.5.26.

*** AsciiDoc
See above.  Note that AsciiDoc is a required dependency unless
building from source tarballs.

*** xmlto
See above.  Note that xmlto is a required dependency unless building
from source tarballs.


* Contact
Send questions, bug reports, comments and feature suggestions to
<ltsmin-support@cs.utwente.nl>.  New versions can be found at
<http://fmt.cs.utwente.nl/tools/ltsmin/>.

;; Local Variables:
;; mode: outline
;; End:
